import numpy as np

#TODO: переписать уравнение Шредингера через классы, основные функции реализовать в качетве методов класса
#TODO: написать комментарии к функциям и методам там, где это необходимо
#TODO: сейчас мы в один момент времени храним лишь одно значение вектора psi. Подумать о том, чтобы хранить массив значений (множество векторов в различные моменты времени)
# хотя, вероятно, это будет затратно по памяти, так что это задача низкого приоритета
#? если выводить графики модуля psi и действительной части, то они не отнормированы между собой (имеют разную высоту). 
# понять, так ли это должно быть, если нет -- исправить, если да, придумать, как отнормировать так, 
# чтобы можно было их смотреть на одном графике
#TODO: переписать куски кода с вычислениями в обртке numba для оптимизации
#? можно ли использовать обертку numba прямо в функции animate
#TODO: придумать несколько потенциальных барьеров и потенциальных ям, посмотреть, как волновой пакет ведет себя в этих ситуациях

def GaussWavePackage(x, x0, sigma0, p0):
    A = (2*np.pi*sigma0**2)**(-0.25)
    return A*np.exp(1j*p0*x - ((x-x0)/(2*sigma0))**2)

class ShrodingerEquation:
    def __init__(self, psi0, U):
        self.psi0 = psi0
        self.U = U